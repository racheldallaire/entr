{"version":3,"sources":["Header/Header.js","CompanyList/CompanyItem/UserSelect/UserSelect.js","CompanyList/CompanyItem/CompanyItem.js","CompanyList/CompanyList.js","Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","UserSelect","handleChange","event","_this","props","setSelectedUsers","target","value","handleDelete","userId","newSelectedUsers","Object","toConsumableArray","selectedUsers","splice","indexOf","_this2","this","core_index_es","htmlFor","multiple","onChange","input","id","renderValue","selected","map","index","key","label","users","onDelete","keys","checked","style","color","primary","CompanyItem","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newUsers","setState","state","initialSelectedUsers","expandIcon","index_es","name","toUpperCase","length","variant","secondary","description","CompanyItem_UserSelect_UserSelect","aria-label","onClick","deleteCompany","CompanyList","addCompany","newId","Math","random","toString","substr","String","Date","now","addingCompany","companies","objectSpread","defineProperty","companyNameInput","companyDescInput","companyOrder","concat","onDeleteCompany","companyId","newCompanies","newCompanyOrder","generateInput","marginTop","undefined","e","margin","renderInput","renderList","listItems","forEach","company","push","CompanyList_CompanyItem_CompanyItem","toggleCompanyInput","cancelCompanyInput","disabled","Dashboard","src_CompanyList_CompanyList","App","src_Header_Header","Grid_default","container","spacing","item","xs","src_Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73888440.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"header\">\n                üë©üèΩ‚Äçüíª entr challenge\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n    Checkbox,\n    Chip, \n    FormControl, \n    Input, \n    InputLabel,\n    ListItemText,\n    MenuItem, \n    Select \n} from '@material-ui/core';\n\nimport './UserSelect.css';\n\n\nclass UserSelect extends Component {\n    static propTypes = {\n        users: PropTypes.object,\n        selectedUsers: PropTypes.array,\n    }\n\n    handleChange = (event) => {\n        this.props.setSelectedUsers(event.target.value);\n    }\n\n    handleDelete = (userId) => () => {\n        // Similar to onDeleteCompany() in the CompanyList component, we make a copy of the\n        // selectedUsers array in the props, before deleting it and then updating the props\n        let newSelectedUsers = [...this.props.selectedUsers];\n        newSelectedUsers.splice(this.props.selectedUsers.indexOf(userId), 1);\n\n        this.props.setSelectedUsers(newSelectedUsers);\n    }\n    \n    render() {\n        return (\n            <FormControl className=\"selectUsers\">\n                <InputLabel htmlFor=\"select-multiple-checkbox\">Assign Users</InputLabel>\n                <Select\n                    multiple\n                    value={this.props.selectedUsers}\n                    onChange={this.handleChange}\n                    input={<Input id=\"select-multiple-checkbox\" />}\n                    renderValue={(selected) => selected.map((userId, index) => {\n                        return (\n                            <Chip\n                                key={index}\n                                label={this.props.users[userId]}\n                                onDelete={this.handleDelete(userId)}\n                            />\n                        )\n                    })}\n                >\n                    {Object.keys(this.props.users).map((userId) => (\n                        <MenuItem key={userId} value={userId}>\n                            <Checkbox \n                                checked={this.props.selectedUsers.indexOf(userId) > -1}\n                                style={{color: \"#7c60e3\"}}\n                            />\n                            <ListItemText primary={this.props.users[userId]} />\n                        </MenuItem>\n                    ))}\n                </Select>\n        </FormControl>\n        );\n    }\n}\n\nexport default UserSelect;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Avatar,\n    Button,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    ListItem, \n    ListItemAvatar,\n    ListItemText,\n    Typography\n} from '@material-ui/core';\nimport { AccountCircle, Delete, ExpandMore } from '@material-ui/icons';\n\nimport UserSelect from './UserSelect/UserSelect';\nimport './CompanyItem.css';\n\n\nclass CompanyItem extends Component {\n    static propTypes = {\n        id: PropTypes.string,\n        name: PropTypes.string,\n        description: PropTypes.string,\n        users: PropTypes.object,\n        initialSelectedUsers: PropTypes.array,\n        deleteCompany: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedUsers: this.props.initialSelectedUsers\n        }\n    }\n\n    setSelectedUsers = (newUsers) => {\n        this.setState({selectedUsers: newUsers});\n    }\n\n    render() {\n        // Render individual companyListItem using the props passed down from the Parent component,\n        // CompanyList. If a company has no users, the button to delete the company is not displayed.\n        return (\n            <ListItem>\n                <ExpansionPanel className=\"companyListItem\">\n                    <ExpansionPanelSummary expandIcon={<ExpandMore />}>\n                        <ListItemAvatar>\n                            <div>\n                                <Avatar>\n                                    {this.props.name[0].toUpperCase()}\n                                </Avatar>\n                                <AccountCircle className=\"smallIcon\"/>\n                                <span className=\"userCount\">{this.state.selectedUsers.length}</span>\n                            </div>\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={\n                                <Typography variant=\"h6\" style={{ color: '#7c60e3' }}>\n                                    {this.props.name}\n                                </Typography>\n                            }\n                            secondary={this.props.description}\n                        />\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <UserSelect \n                            users={this.props.users} \n                            initialSelectedUsers={this.props.initialSelectedUsers} \n                            selectedUsers={this.state.selectedUsers}\n                            setSelectedUsers={this.setSelectedUsers}\n                        />\n                        <p/>\n                        { this.state.selectedUsers.length === 0 ? \n                            <Button \n                                aria-label=\"Delete\"\n                                className=\"deleteCompany\"\n                                onClick={this.props.deleteCompany} \n                                color=\"secondary\"\n                                variant=\"contained\" \n                            >\n                                <Delete /> Delete \n                            </Button>\n                            : ''\n                        }\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            </ListItem>\n        );\n    }\n}\n\nexport default CompanyItem;\n","import React, { Component } from 'react';\nimport { Save } from '@material-ui/icons';\nimport {\n    Avatar,\n    Button,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    List, \n    ListItem, \n    ListItemAvatar,\n    ListItemText,\n    TextField,\n} from '@material-ui/core';\n\nimport { companies, users, companyOrder } from '../demoData.json';\nimport CompanyItem from './CompanyItem/CompanyItem';\nimport './CompanyList.css';\n\n\nclass CompanyList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            addingCompany: false, \n            companies: companies,\n            companyNameInput: '',\n            companyDescInput: '',\n            companyOrder: companyOrder\n        }\n    }\n\n    addCompany = () => {\n        // Generate random alphanumerical string to use as a company ID\n        const newId = 'c-' + Math.random().toString(36).substr(2, 9) + '-' + String(Date.now()).substr(4); \n        \n        // Set the state using the old companies plus the one just inputted by the user\n        this.setState({\n            addingCompany: false,\n            companies: {\n                ...this.state.companies, \n                [newId]: {\n                    name: this.state.companyNameInput,\n                    description: this.state.companyDescInput,\n                    users: []\n                }\n            },\n            companyNameInput: '',\n            companyDescInput: '',\n            companyOrder: [...this.state.companyOrder, newId]\n        });\n    }\n\n    onDeleteCompany = (companyId) => () => {\n        // We can't mutate state, so we clone the companies and companyOrder before deleting \n        // the company that was removed, then update the state\n        let newCompanies = {...this.state.companies};\n        delete newCompanies[companyId];\n\n        let newCompanyOrder = [...this.state.companyOrder];\n        newCompanyOrder.splice(newCompanyOrder.indexOf(companyId), 1);\n\n        this.setState({companies: newCompanies, companyOrder: newCompanyOrder});\n    }\n\n    generateInput = (index) => {\n        // This function returns the input fields that will be rendered by renderInput()\n        return (\n            <ListItem key={index} className=\"\">\n                 <ExpansionPanel className=\"companyListItem\">\n                    <ExpansionPanelSummary>\n                        <ListItemAvatar>\n                            <Avatar style={{marginTop: \"30px\"}}>\n                                { this.state.companyNameInput[0] !== undefined ?\n                                    this.state.companyNameInput[0].toUpperCase() :\n                                    ''\n                                }\n                            </Avatar>\n                        </ListItemAvatar>  \n                        <ListItemText>\n                            <TextField\n                                id=\"standard-uncontrolled\"\n                                label=\"Company Name\"\n                                className=\"companyNameInput\"\n                                onChange={(e) => {this.setState({companyNameInput: e.target.value})}}\n                                margin=\"normal\"\n                            />\n                            <br/>\n                            <TextField\n                                id=\"outlined-name\"\n                                label=\"Description\"\n                                className=\"companyDescInput\"\n                                onChange={(e) => {this.setState({companyDescInput: e.target.value})}}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />   \n                        </ListItemText>\n                    </ExpansionPanelSummary>\n                </ExpansionPanel>\n            </ListItem>\n        )\n    }\n\n    renderInput = () => {\n        // We need to pass in a unique key into generateInput(), but since it is only used once,\n        // it doesn't really matter what we pass in. I used 'a' here.\n        if (this.state.addingCompany) {\n            return this.generateInput('a')\n        }\n    }\n\n    renderList = () => {\n        var listItems = [];\n        this.state.companyOrder.forEach((companyId) => {\n            const company = this.state.companies[companyId];\n            listItems.push(\n                <CompanyItem\n                    key={companyId} \n                    id={companyId}\n                    name={company.name}\n                    description={company.description}\n                    users={users}\n                    initialSelectedUsers={company.users}\n                    deleteCompany={this.onDeleteCompany(companyId)} \n                />\n            );\n        });\n\n        // Each listItem element is a child of <List>\n        return (\n            <List>\n                {listItems}\n            </List>\n        )\n    }\n\n    toggleCompanyInput = () => {\n        this.setState({addingCompany: true});\n    }\n\n    cancelCompanyInput = () => {\n        this.setState({\n            addingCompany: false,\n            companyNameInput: '',\n            companyDescInput: '',\n        })\n    }\n\n    render() {\n        // In the render, we make the 'Save' button disabled if the company name field is blank, and \n        // don't display the 'New Company' button while addingCompany state is true.\n        return (\n            <div className=\"companyList\">\n                <div className=\"list\">\n                    {this.renderList()}\n                    {this.renderInput()}\n                </div>\n                {this.state.addingCompany ? \n                <div className=\"buttonContainer\">\n                    {this.state.companyNameInput === '' ? \n                        <Button \n                            disabled \n                            variant=\"contained\"\n                        >\n                            <Save /> Save\n                        </Button> : \n                        <Button \n                            aria-label=\"Save\" \n                            onClick={this.addCompany}\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            <Save /> Save\n                        </Button> \n                    }\n                    <Button \n                        aria-label=\"Cancel\" \n                        className=\"cancelEntry\"\n                        onClick={this.cancelCompanyInput}\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                    >\n                        Cancel\n                    </Button>\n                </div> :\n                <Button \n                    className=\"addCompany\" \n                    onClick={this.toggleCompanyInput} \n                    variant=\"contained\" \n                    color=\"primary\"\n                >\n                    New Company\n                </Button>\n                }\n            </div>\n        );\n    }\n}\n\nexport default CompanyList;","import React, { Component } from 'react';\nimport CompanyList from '../CompanyList/CompanyList';\n\nimport './Dashboard.css';\n\n\nclass Dashboard extends Component {\n    render() {\n        return (\n            <div>\n                <CompanyList />\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport './App.css';\nimport Header from './Header/Header';\nimport Dashboard from './Dashboard/Dashboard';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Header />\n                <Grid container spacing={24}>\n                    <Grid item xs />\n                    <Grid item xs={6}>\n                        <Dashboard />\n                    </Grid>\n                    <Grid item xs />\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}